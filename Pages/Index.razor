@page "/"
@using System.Net.Http;
@using HtmlAgilityPack;
@using System.IO;

@code{ public string url { get; set; } = "";

      public Uri uri; }


<body style="height: 100%;">
  <div style="margin-left:-2rem; width:104%; height:40px; background-color:blue">
    <button style="margin-left: 2rem; margin-top: 0.4rem">New</button>
    <input @bind="url" type="text" width="100px" />
    <button @onclick="urlsubmit" style="margin-left: 0rem; margin-top: 0.4rem">Submit</button>
    <button style="margin-left: 0rem; margin-top: 0.4rem">Save</button>
    <button style="margin-left: 0rem; margin-top: 0.4rem">Print</button>
  </div>
  <iframe src="@verifystring" id="page id" style="width:48%; height:93%"></iframe>
  <iframe srcdoc="@modifiedpage" id="page id" style="width:48%; height:93%"></iframe>

</body>

@code{ public string modifiedpage;

  public string spage;

  async Task urlsubmit()
  {
    if (url != null)
    {
      string v = verifystringd(url);
      if (v != null)
      {
        verifystring = v;
        uri = new Uri(verifystring);
        try
        {
          string temp = await gethtmlfromurl(url);
          if (temp != null)
          {
            modifiedpage = relativeuri(temp);
            Console.WriteLine(modifiedpage);

          }
        }
        catch (Exception) { }
      }
    }
  }

  public string relativeuri(string html)
  {
    StringWriter writer = new StringWriter();
    HtmlAgilityPack.HtmlDocument doc = new HtmlAgilityPack.HtmlDocument();

    doc.LoadHtml(html);
    HtmlNode head = doc.DocumentNode.SelectSingleNode("/html/head");
    HtmlNode basenode = doc.CreateElement("base");

    string strTest = verifystring;
    int index = strTest.LastIndexOf("/");
    strTest = strTest.Substring(0, index);
    strTest += "/";
    basenode.SetAttributeValue("href", strTest);
    Console.WriteLine(strTest);
    head.PrependChild(basenode);

    doc.Save(writer);

    return writer.ToString();
  }

  private string verifystring { get; set; }

  private string? verifystringd(string url)
  {
    if (url.StartsWith("view-source:"))
      url = url.Remove(0, 12);

    if (url.StartsWith("http://") || url.StartsWith("https://"))
      return url;
    else return null;
  }

  public async Task<string> gethtmlfromurl(string url)
  {
    Console.WriteLine(url);
    string result;
    using (HttpClient client = new HttpClient())
    {
      using (HttpResponseMessage response = await client.GetAsync(url))
      {
        using (HttpContent content = response.Content)
        {
          result = await content.ReadAsStringAsync();
        }
      }
    }
    return result;
  }
  }
