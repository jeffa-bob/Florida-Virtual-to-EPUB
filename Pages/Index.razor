@page "/"
@inject IJSRuntime JSRuntime
@using System.Net.Http;
@using HtmlAgilityPack;
@using System.IO;

@code{ public string url { get; set; } = "";}


<body style="height: 100%;">
  <div style="margin-left:-2rem; width:104%; height:40px; background-color:blue">
    <button style="margin-left: 2rem; margin-top: 0.4rem">New</button>
    <input @bind="url" type="text" width="100px" />
    <button @onclick="urlsubmit" style="margin-left: 0rem; margin-top: 0.4rem">Submit</button>
    <button @onclick="savetocomputer" style="margin-left: 0rem; margin-top: 0.4rem">Save</button>
    <button style="margin-left: 0rem; margin-top: 0.4rem">Print</button>
  </div>
  <iframe src="@verifystring" id="page id" style="width:48%; height:93%"></iframe>
  <iframe srcdoc="@modifiedpage" id="page id" style="width:48%; height:93%"></iframe>

</body>


@code{ public string modifiedpage;
  string filename;

  private string verifystring { get; set; }


  async Task urlsubmit()
  {
    if (url != null)
    {
      string v = verifystringd(url);
      if (v != null)
      {
        verifystring = v;
        try
        {
          modifiedpage = joindocs(await extractpages(verifystring));
          filename = verifystring.Substring(verifystring.LastIndexOf("/")+1, verifystring.LastIndexOf(".")-verifystring.LastIndexOf("/")) + ".pdf";
          //modifiedpage = temp;
          Console.WriteLine(filename);

        }
        catch (Exception) { }
      }
    }
  }

  public async Task<List<string>> extractpages(string url)
  {
    List<string> final = new List<string>();
    for (int i = 1; i < 10; i++)
    {
      string tempurl = url;
      tempurl = tempurl.Remove(tempurl.LastIndexOf(".") - 1, 1);
      tempurl = tempurl.Insert(tempurl.LastIndexOf("."), i.ToString());
      string temp = await gethtmlfromurl(tempurl);
      if (temp != null)
      {
        final.Add(temp);
        Console.WriteLine(temp);
      }
      else
        break;

    }
    Console.WriteLine($"Found {final.Count()} pages in this lesson");
    return final;
  }

  public string joindocs(List<string> docs)
  {
    StringWriter writer = new StringWriter();
    List<HtmlDocument> htmldocs = new List<HtmlDocument>();
    foreach (string doc in docs)
    {
      HtmlDocument htmldoc = new HtmlDocument();
      htmldoc.LoadHtml(relativeuri(doc));
      htmldocs.Add(htmldoc);
    }
    foreach (HtmlDocument htmldoc in htmldocs)
    {
      htmldoc.Save(writer);
    }
    return writer.ToString();
  }

  public string relativeuri(string html)
  {
    StringWriter writer = new StringWriter();
    HtmlAgilityPack.HtmlDocument doc = new HtmlAgilityPack.HtmlDocument();

    string baseUrl = verifystring;
    doc.LoadHtml(html);
    foreach (var img in doc.DocumentNode.Descendants("img"))
    {
      img.Attributes["src"].Value = new Uri(new Uri(baseUrl), img.Attributes["src"].Value).AbsoluteUri;
    }


    foreach (var a in doc.DocumentNode.Descendants("a"))
    {
      a.Attributes["href"].Value = new Uri(new Uri(baseUrl), a.Attributes["href"].Value).AbsoluteUri;
    }
    doc.Save(writer);

    return writer.ToString();
  }

  private string? verifystringd(string url)
  {
    if (url.StartsWith("view-source:"))
      url = url.Remove(0, 12);

    if (url.StartsWith("http://") || url.StartsWith("https://"))
      return url;
    else return null;
  }

  public async Task<string?> gethtmlfromurl(string url)
  {
    Console.WriteLine(url);
    string result;
    using (HttpClient client = new HttpClient())
    {
      using (HttpResponseMessage response = await client.GetAsync(url))
      {
        if (response.StatusCode != System.Net.HttpStatusCode.OK)
        {
          return null;
        }
        using (HttpContent content = response.Content)
        {
          result = await content.ReadAsStringAsync();
        }
      }
    }
    return result;
  }

  public async void savetocomputer()
  {
    await JSRuntime.InvokeAsync<object>("FileSaveAs", filename, convertopdf(modifiedpage).ToArray());
  }

  public MemoryStream convertopdf(string html)
  {
    using (MemoryStream htmlSource = new MemoryStream(System.Text.Encoding.GetEncoding(1252).GetBytes(html)))
    using (MemoryStream pdfDest = new MemoryStream())
    {
      ConverterProperties converterProperties = new ConverterProperties();
      converterProperties.SetCharset("CP1252");
      HtmlConverter.ConvertToPdf(htmlSource, pdfDest, converterProperties);
      return pdfDest;
    }
  } }
