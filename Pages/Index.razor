@page "/"
@using System.Net.Http;
@using HtmlAgilityPack;
@using System.IO;

@code{ public string url { get; set; } = "";

  public Uri uri; }


<body style="height: 100%;">
  <div style="margin-left:-2rem; width:104%; height:40px; background-color:blue">
    <button style="margin-left: 2rem; margin-top: 0.4rem">New</button>
    <input @bind="url" type="text" width="100px" />
    <button @onclick="urlsubmit" style="margin-left: 0rem; margin-top: 0.4rem">Submit</button>
    <button style="margin-left: 0rem; margin-top: 0.4rem">Save</button>
    <button style="margin-left: 0rem; margin-top: 0.4rem">Print</button>
  </div>
  <iframe src="@verifystring" id="page id" style="width:48%; height:93%"></iframe>
  <iframe srcdoc="@modifiedpage" id="page id" style="width:48%; height:93%"></iframe>

</body>

@code{ public string modifiedpage;

  public string spage;

  private string verifystring { get; set; }


  async Task urlsubmit()
  {
    if (url != null)
    {
      string v = verifystringd(url);
      if (v != null)
      {
        verifystring = v;
        uri = new Uri(verifystring);
        try
        {
          string temp = await gethtmlfromurl(url);
          if (temp != null)
          {
            modifiedpage = relativeuri(temp);
            //modifiedpage = temp;
            Console.WriteLine(modifiedpage);

          }
        }
        catch (Exception) { }
      }
    }
  }

  public List<string> extractpages(string html)
  {
    HtmlDocument doc = new HtmlDocument();
    doc.LoadHtml(html);
    try
    {
      HtmlAgilityPack.HtmlNodeCollection nodes = doc.DocumentNode.SelectNodes("//div[@class=\"page_links\"]");
      if(nodes == null)
        throw new ArgumentException("does not contain page links");

      foreach (HtmlAgilityPack.HtmlNode node in nodes)
      {
        //Do you say you want to access to <h2>, <p> here?
        //You can do:
        HtmlNodeCollection allaNodes = node.SelectNodes(".//a"); //That will search in depth too

        //And you can also take a look at the children, without using XPath (like in a tree):        
      }
    }
    return new List<string>(1);
  }


  public string relativeuri(string html)
  {
    StringWriter writer = new StringWriter();
    HtmlAgilityPack.HtmlDocument doc = new HtmlAgilityPack.HtmlDocument();

    string baseUrl = url;
    doc.LoadHtml(html);
    foreach (var img in doc.DocumentNode.Descendants("img"))
    {
      img.Attributes["src"].Value = new Uri(new Uri(baseUrl), img.Attributes["src"].Value).AbsoluteUri;
    }


    foreach (var a in doc.DocumentNode.Descendants("a"))
    {
      a.Attributes["href"].Value = new Uri(new Uri(baseUrl), a.Attributes["href"].Value).AbsoluteUri;
    }
    doc.Save(writer);

    return writer.ToString();
  }

  private string? verifystringd(string url)
  {
    if (url.StartsWith("view-source:"))
      url = url.Remove(0, 12);

    if (url.StartsWith("http://") || url.StartsWith("https://"))
      return url;
    else return null;
  }

  public async Task<string> gethtmlfromurl(string url)
  {
    Console.WriteLine(url);
    string result;
    using (HttpClient client = new HttpClient())
    {
      using (HttpResponseMessage response = await client.GetAsync(url))
      {
        using (HttpContent content = response.Content)
        {
          result = await content.ReadAsStringAsync();
        }
      }
    }
    return result;
  } }
