@page "/"
@inject IJSRuntime JSRuntime
@using System.Net.Http;
@using HtmlAgilityPack;
@using System.IO;

@code{
  public string url { get; set; } = "";
}


<body style="height: 100%;">
  <div style="margin-left:-2rem; width:104%; height:40px; background-color:blue">
    <button style="margin-left: 2rem; margin-top: 0.4rem">New</button>
    <input @bind="url" type="text" width="100px" />
    <button @onclick="urlsubmit" style="margin-left: 0rem; margin-top: 0.4rem">Submit</button>
    <button @onclick="savetocomputer" style="margin-left: 0rem; margin-top: 0.4rem">Save</button>
    <button style="margin-left: 0rem; margin-top: 0.4rem">Print</button>
  </div>
  <iframe src="@verifystring" id="page id" style="width:48%; height:93%"></iframe>
  <iframe srcdoc="@modifiedpage" id="page id" style="width:48%; height:93%"></iframe>

</body>


@code{
  public string modifiedpage;
      string filename;

      private string verifystring { get; set; }


      async Task urlsubmit()
      {
          if (url != null)
          {
              string v = verifystringd(url);
              if (v != null)
              {
                  verifystring = v;
                  try
                  {
                      modifiedpage = addmathscribe(joindocs(await extractpages(verifystring)));
                      filename = verifystring.Substring(verifystring.LastIndexOf("/") + 1, verifystring.LastIndexOf(".") - verifystring.LastIndexOf("/")) + ".pdf";
                      //modifiedpage = temp;
                      Console.WriteLine(filename);

                  }
                  catch (Exception) { }
              }
          }
      }

      public async Task<List<string>> extractpages(string url)
      {
          List<string> final = new List<string>();
          for (int i = 0; i < 20; i++)
          {
              string tempurl = url;
              tempurl = tempurl.Remove(tempurl.LastIndexOf(".") - 2, 2);
              tempurl = tempurl.Insert(tempurl.LastIndexOf("."), i.ToString("00"));
              string temp = await gethtmlfromurl(tempurl);
              if (temp != null)
              {
                  final.Add(temp);
                  Console.WriteLine(temp);
              }
              else
                  break;

          }
          Console.WriteLine($"Found {final.Count()} pages in this lesson");
          return final;
      }

      public string addmathscribe(string html)
      {
          StringWriter writer = new StringWriter();
          HtmlDocument doc = new HtmlDocument();
          doc.LoadHtml(html);
          HtmlNode htma = doc.DocumentNode.Descendants("html").FirstOrDefault();
          htma.SetAttributeValue("xmlns:m", "http://www.w3.org/1998/Math/MathM");
          HtmlNode head = doc.DocumentNode.SelectSingleNode("/html/head");

          HtmlNode link = doc.CreateElement("link");
          head.AppendChild(link);
          link.SetAttributeValue("rel", "stylesheet");
          link.SetAttributeValue("href", "/mathscribe/jqmath-0.4.3.css");
          HtmlNode link2 = doc.CreateElement("link");
          head.AppendChild(link2);
          link2.SetAttributeValue("rel", "stylesheet");
          link2.SetAttributeValue("href", "http://fonts.googleapis.com/css?family=UnifrakturMaguntia");
          HtmlNode meta = doc.CreateElement("meta");
          head.AppendChild(meta);
          meta.SetAttributeValue("charset", "utf-8");
          HtmlNode script1 = doc.CreateElement("script");
          head.AppendChild(script1);
          script1.SetAttributeValue("src","/mathscribe/jquery-1.4.3.min.js");
          HtmlNode script2 = doc.CreateElement("script");
          head.AppendChild(script2);
          script2.SetAttributeValue("src","/mathscribe/jqmath-etc-0.4.6.min.js");
          script2.SetAttributeValue("charset", "utf-8");
          doc.Save(writer);
          return writer.ToString();
    }

      public string joindocs(List<string> docs)
      {
          StringWriter writer = new StringWriter();
          List<HtmlDocument> htmldocs = new List<HtmlDocument>();
          foreach (string doc in docs)
          {
              HtmlDocument htmldoc = new HtmlDocument();
              htmldoc.LoadHtml(relativeuri(doc));

              //checks to see if the html tag exists to escape 404 errors
              bool ishtmlExist = htmldoc.DocumentNode
                            .Descendants("html")
                            .Any();

            if (ishtmlExist)
                  htmldocs.Add(htmldoc);
        }
            foreach (HtmlDocument htmldoc in htmldocs)
          {
              htmldoc.Save(writer);
          }
          return writer.ToString();
      }

      public string relativeuri(string html)
      {
          StringWriter writer = new StringWriter();
          HtmlAgilityPack.HtmlDocument doc = new HtmlAgilityPack.HtmlDocument();

          string baseUrl = verifystring;
          doc.LoadHtml(html);
          foreach (var img in doc.DocumentNode.Descendants("img"))
          {
              img.Attributes["src"].Value = new Uri(new Uri(baseUrl), img.Attributes["src"].Value).AbsoluteUri;
          }


          foreach (var a in doc.DocumentNode.Descendants("a"))
          {
              a.Attributes["href"].Value = new Uri(new Uri(baseUrl), a.Attributes["href"].Value).AbsoluteUri;
          }
          doc.Save(writer);
  
        return writer.ToString();
    }

        private string? verifystringd(string url)
      {
          if (url.StartsWith("view-source:"))
              url = url.Remove(0, 12);

        if   (url.StartsWith("http://") || url.StartsWith("https://"))
              return url;
        else   return null;
    }

        public async Task<string?> gethtmlfromurl(string url)
      {
          Console.WriteLine(url);
          string result;
          using (HttpClient client = new HttpClient())
          {
              using (HttpResponseMessage response = await client.GetAsync(url))
              {
                  if (response.StatusCode != System.Net.HttpStatusCode.OK)
                  {
                      return null;
                  }
                  using (HttpContent content = response.Content)
                  {
                      result = await content.ReadAsStringAsync();
                  }
            }
            }
          return result;
      }

      public async void savetocomputer()
      {
          await JSRuntime.InvokeAsync<object>("FileSaveAs", filename, convertopdf(modifiedpage).ToArray());
      }

      public MemoryStream convertopdf(string html)
      {
          using (MemoryStream htmlSource = new MemoryStream(System.Text.Encoding.GetEncoding("1252").GetBytes(html)))
          using (MemoryStream pdfDest = new MemoryStream())
          {
              ConverterProperties converterProperties = new ConverterProperties();
              converterProperties.SetCharset("Windows-1252");
              HtmlConverter.ConvertToPdf(htmlSource, pdfDest, converterProperties);
              return pdfDest;
        }
      }
}
